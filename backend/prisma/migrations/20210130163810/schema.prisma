datasource db {
    provider = "sqlite"
    url = "***"
}

generator client {
    provider = "prisma-client-js"
}

model Permission {
    id    String @id @default(cuid())
    name  String @unique
    users User[]
}

model User {
    id               String       @id @default(cuid())
    name             String
    email            String       @unique
    password         String
    resetToken       String?
    resetTokenExpiry Float?
    permissions      Permission[]
}

model ProductImage {
    id         String    @id @default(cuid())
    url        String
    largeUrl   String
    sorting    Int?
    category   Category? @relation(fields: [categoryId], references: [id])
    product    Product?  @relation(fields: [productId], references: [id])
    categoryId String?
    productId  String?
    sku        Sku[]
}

model CategoryImage {
    id         String    @id @default(cuid())
    url        String
    largeUrl   String
    sorting    Int?
    category   Category? @relation(fields: [categoryId], references: [id])
    product    Product?  @relation(fields: [productId], references: [id])
    categoryId String?
    productId  String?
    sku        Sku[]

    @@map("Image")
}

model Category {
    id             String          @id @default(cuid())
    sorting        Int?
    published      Boolean         @default(false)
    products       Product[]
    images         CategoryImage[]
    slug_da        String?         @unique
    slug_en        String?         @unique
    name_da        String?
    name_en        String?
    description_da String?
    description_en String?
    ProductImage   ProductImage[]
}

model Report {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    resolvedAt  DateTime?
    imageUrl    String
    url         String
    description String
}

model Product {
    id                 String          @id @default(cuid())
    code               String?         @unique
    customizable       Boolean         @default(true)
    price              Price?          @relation(fields: [priceId], references: [id])
    hasMultiplePrices  Boolean         @default(false)
    sorting            Int?
    published          Boolean         @default(false)
    categories         Category[]
    images             ProductImage[]
    skus               Sku[]
    selectedAttributes String?
    slug_da            String?         @unique
    slug_en            String?         @unique
    name_da            String?
    name_en            String?
    description_da     String?
    description_en     String?
    priceId            String?
    CategoryImage      CategoryImage[]
}

model Sku {
    id              String         @id @default(cuid())
    sku             String         @unique
    product         Product        @relation(fields: [productId], references: [id])
    price           Price?         @relation(fields: [priceId], references: [id])
    image           ProductImage?  @relation(fields: [imageId], references: [id])
    productId       String
    priceId         String?
    imageId         String?
    stock           Int            @default(0)
    CartSku         CartSku[]
    CategoryImage   CategoryImage? @relation(fields: [categoryImageId], references: [id])
    categoryImageId String?
}

model CartSku {
    id            String  @id @default(cuid())
    sku           Sku     @relation(fields: [skuId], references: [id])
    cart          Cart    @relation(fields: [cartId], references: [id])
    skuId         String
    cartId        String
    customization String?
}

model Attribute {
    id       String @id @default(cuid())
    name     String
    options  String
    position Int
}

model Price {
    id              String            @id @default(cuid())
    DKK             Int
    USD             Int
    EUR             Int
    GBP             Int
    product         Product[]
    sku             Sku[]
    shippingProfile ShippingProfile[]
}

model Cart {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    cartSkus  CartSku[]
}

model ShippingProfile {
    id      String @id @default(cuid())
    code    String @unique
    price   Price  @relation(fields: [priceId], references: [id])
    priceId String
}

model PurchasedSku {
    id            String  @id @default(cuid())
    code          String
    name          String
    price         Int
    currency      String
    image         String
    variationInfo String
    order         Order?  @relation(fields: [orderId], references: [id])
    orderId       String?
    customization String?
}

model Order {
    number        Int            @id @default(autoincrement())
    id            String         @unique @default(cuid())
    createdAt     DateTime       @default(now())
    shippedAt     DateTime?
    items         PurchasedSku[]
    shipping      String
    shippingCosts String
    total         Int
    currency      String
    charge        String
    customer      Customer       @relation(fields: [customerId], references: [id])
    archived      Boolean        @default(false)
    trackingCode  String?
    customerId    String
    locale        String
    comment       String?
}

model Customer {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    email     String
    name      String
    address   String
    address2  String?
    city      String
    zip       String
    country   String
    orders    Order[]
}
